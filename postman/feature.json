{
  "info": {
    "_postman_id": "789aeb14-6858-41b4-9741-631b0a66981a",
    "name": "Test Explore With Me - comments",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "4689559"
  },
  "item": [
    {
      "name": "private",
      "item": [
        {
          "name": "Добавление комментария",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Ответ должен содержать тело в формате json\", function() {\r",
                  "    pm.response.to.be.withBody; // ответ должен содержать тело\r",
                  "    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ответ должен содержать код статуса 201\", function(){\r",
                  "pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"uid\", user.id);\r",
                  "\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "\r",
                  "        //const comment = { text: \"Автотест: комментарий к событию\" };\r",
                  "        //const createdComment = await api.addComment(user.id, event.id, comment);\r",
                  "        //pm.collectionVariables.set(\"cid\", createdComment.id);\r",
                  "\r",
                  "        //console.log(\"Комментарий успешно создан:\", createdComment);\r",
                  "    } catch (err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => {\r",
                  "    try {\r",
                  "        await main();\r",
                  "    } catch (e) {\r",
                  "        console.error(e);\r",
                  "    } finally {\r",
                  "        clearInterval(interval);\r",
                  "    }\r",
                  "}, 100);\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"text\" : \"Первый комментарий\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:eventId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получить комментарии пользователя",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"uid\", user.id);\r",
                  "\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id); \r",
                  "\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "\r",
                  "        const comment = { text: \"Автотест: комментарий к событию\" };\r",
                  "        const createdComment = await api.addComment(user.id, event.id, comment);\r",
                  "        \r",
                  "        // сохраняем ID созданного комментария\r",
                  "        pm.collectionVariables.set(\"cid\", createdComment.id);\r",
                  "\r",
                  "        // опционально обновляем тело текущего запроса\r",
                  "        pm.request.body.update({\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(comment),\r",
                  "            options: { raw: { language: 'json' } }\r",
                  "        });\r",
                  "\r",
                  "        console.log(\"Комментарий успешно создан:\", createdComment);\r",
                  "    } catch (err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => {\r",
                  "    try {\r",
                  "        await main();\r",
                  "    } catch (e) {\r",
                  "        console.error(e);\r",
                  "    } finally {\r",
                  "        clearInterval(interval);\r",
                  "    }\r",
                  "}, 100);\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Статус 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Вернулся список комментариев\", function () {\r",
                  "    const json = pm.response.json();\r",
                  "    pm.expect(json).to.be.an(\"array\");\r",
                  "    pm.expect(json.length).to.be.greaterThan(0);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Изменение комментария",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Ответ должен содержать тело в формате json\", function() {\r",
                  "    pm.response.to.be.withBody; // ответ должен содержать тело\r",
                  "    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ответ должен содержать код статуса 200\", function(){\r",
                  "pm.response.to.have.status(200);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"uid\", user.id);\r",
                  "\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id); // обязательно переопределяем!\r",
                  "\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "\r",
                  "        const comment = { text: \"Автотест: комментарий к событию\" };\r",
                  "        const createdComment = await api.addComment(user.id, event.id, comment);\r",
                  "        \r",
                  "        // сохраняем ID созданного комментария\r",
                  "        pm.collectionVariables.set(\"cid\", createdComment.id);\r",
                  "\r",
                  "        // опционально обновляем тело текущего запроса\r",
                  "      if (pm.request.method === \"POST\") {\r",
                  "    pm.request.body.update({\r",
                  "        mode: 'raw',\r",
                  "        raw: JSON.stringify(comment),\r",
                  "        options: { raw: { language: 'json' } }\r",
                  "    });\r",
                  "}\r",
                  "        \r",
                  "\r",
                  "        console.log(\"Комментарий успешно создан:\", createdComment);\r",
                  "    } catch (err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => {\r",
                  "    try {\r",
                  "        await main();\r",
                  "    } catch (e) {\r",
                  "        console.error(e);\r",
                  "    } finally {\r",
                  "        clearInterval(interval);\r",
                  "    }\r",
                  "}, 100);\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"text\" : \"Обновленный комментарий\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление комментария",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 204\", function(){\r",
                  "pm.response.to.have.status(204);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"uid\", user.id);\r",
                  "\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id); // обязательно переопределяем!\r",
                  "\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "\r",
                  "        const comment = { text: \"Автотест: комментарий к событию\" };\r",
                  "        const createdComment = await api.addComment(user.id, event.id, comment);\r",
                  "        \r",
                  "        // сохраняем ID созданного комментария\r",
                  "        pm.collectionVariables.set(\"cid\", createdComment.id);\r",
                  "\r",
                  "        // опционально обновляем тело текущего запроса\r",
                  "        pm.request.body.update({\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(comment),\r",
                  "            options: { raw: { language: 'json' } }\r",
                  "        });\r",
                  "\r",
                  "        console.log(\"Комментарий успешно создан:\", createdComment);\r",
                  "    } catch (err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => {\r",
                  "    try {\r",
                  "        await main();\r",
                  "    } catch (e) {\r",
                  "        console.error(e);\r",
                  "    } finally {\r",
                  "        clearInterval(interval);\r",
                  "    }\r",
                  "}, 100);\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "admin",
      "item": [
        {
          "name": "Модерация комментария (rejected)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let source = {};\r",
                  "try {\r",
                  "    source = pm.request.body && pm.request.body.raw\r",
                  "        ? JSON.parse(pm.request.body.raw)\r",
                  "        : {};\r",
                  "} catch (e) {\r",
                  "    console.warn(\"Не удалось распарсить тело запроса:\", e);\r",
                  "}\r",
                  "\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Ответ должен содержать тело в формате json\", function() {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ответ должен содержать код статуса 200\", function(){\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"uid\", user.id);\r",
                  "\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id); // обязательно переопределяем!\r",
                  "\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "\r",
                  "        const comment = { text: \"Автотест: комментарий к событию\" };\r",
                  "        const createdComment = await api.addComment(user.id, event.id, comment);\r",
                  "        \r",
                  "        // сохраняем ID созданного комментария\r",
                  "        pm.collectionVariables.set(\"cid\", createdComment.id);\r",
                  "\r",
                  "        console.log(\"Комментарий успешно создан:\", createdComment);\r",
                  "    } catch (err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => {\r",
                  "    try {\r",
                  "        await main();\r",
                  "    } catch (e) {\r",
                  "        console.error(e);\r",
                  "    } finally {\r",
                  "        clearInterval(interval);\r",
                  "    }\r",
                  "}, 100);\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/comments/:commentId?publish=false&moderatorComment=fail",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "comments",
                ":commentId"
              ],
              "query": [
                {
                  "key": "publish",
                  "value": "false"
                },
                {
                  "key": "moderatorComment",
                  "value": "fail"
                }
              ],
              "variable": [
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Модерация комментария (approve)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let source = {};\r",
                  "try {\r",
                  "    source = pm.request.body && pm.request.body.raw\r",
                  "        ? JSON.parse(pm.request.body.raw)\r",
                  "        : {};\r",
                  "} catch (e) {\r",
                  "    console.warn(\"Не удалось распарсить тело запроса:\", e);\r",
                  "}\r",
                  "\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Ответ должен содержать тело в формате json\", function() {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Ответ должен содержать код статуса 200\", function(){\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"uid\", user.id);\r",
                  "\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id); // обязательно переопределяем!\r",
                  "\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "\r",
                  "        const comment = { text: \"Автотест: комментарий к событию\" };\r",
                  "        const createdComment = await api.addComment(user.id, event.id, comment);\r",
                  "        \r",
                  "        // сохраняем ID созданного комментария\r",
                  "        pm.collectionVariables.set(\"cid\", createdComment.id);\r",
                  "\r",
                  "\r",
                  "        console.log(\"Комментарий успешно создан:\", createdComment);\r",
                  "    } catch (err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => {\r",
                  "    try {\r",
                  "        await main();\r",
                  "    } catch (e) {\r",
                  "        console.error(e);\r",
                  "    } finally {\r",
                  "        clearInterval(interval);\r",
                  "    }\r",
                  "}, 100);\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/comments/:commentId?publish=true&moderatorComment=OK",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "comments",
                ":commentId"
              ],
              "query": [
                {
                  "key": "publish",
                  "value": "true"
                },
                {
                  "key": "moderatorComment",
                  "value": "OK"
                }
              ],
              "variable": [
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление комментария админом",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 204\", function(){\r",
                  "pm.response.to.have.status(204);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"uid\", user.id);\r",
                  "\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id); // обязательно переопределяем!\r",
                  "\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "\r",
                  "        const comment = { text: \"Автотест: комментарий к событию\" };\r",
                  "        const createdComment = await api.addComment(user.id, event.id, comment);\r",
                  "        \r",
                  "        // сохраняем ID созданного комментария\r",
                  "        pm.collectionVariables.set(\"cid\", createdComment.id);\r",
                  "\r",
                  "        // опционально обновляем тело текущего запроса\r",
                  "        pm.request.body.update({\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(comment),\r",
                  "            options: { raw: { language: 'json' } }\r",
                  "        });\r",
                  "\r",
                  "        console.log(\"Комментарий успешно создан:\", createdComment);\r",
                  "    } catch (err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => {\r",
                  "    try {\r",
                  "        await main();\r",
                  "    } catch (e) {\r",
                  "        console.error(e);\r",
                  "    } finally {\r",
                  "        clearInterval(interval);\r",
                  "    }\r",
                  "}, 100);\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение всех комментариев на модерации",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"uid\", user.id);\r",
                  "\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id); // обязательно переопределяем!\r",
                  "\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "\r",
                  "        const comment = { text: \"Комментарий на модерации\" };\r",
                  "        const createdComment = await api.addComment(user.id, event.id, comment);\r",
                  "        \r",
                  "        // сохраняем ID созданного комментария\r",
                  "        pm.collectionVariables.set(\"cid\", createdComment.id);\r",
                  "\r",
                  "\r",
                  "        console.log(\"Комментарий успешно создан:\", createdComment);\r",
                  "    } catch (err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => {\r",
                  "    try {\r",
                  "        await main();\r",
                  "    } catch (e) {\r",
                  "        console.error(e);\r",
                  "    } finally {\r",
                  "        clearInterval(interval);\r",
                  "    }\r",
                  "}, 100);\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Статус 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Вернулся список комментариев\", function () {\r",
                  "    const json = pm.response.json();\r",
                  "    pm.expect(json).to.be.an(\"array\");\r",
                  "    pm.expect(json.length).to.be.greaterThan(0);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/comments/pending",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "comments",
                "pending"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "public",
      "item": [
        {
          "name": "Получение комментариев по событию",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        // Создание пользователя и категории\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"uid\", user.id);\r",
                  "\r",
                  "        const user2 = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"uid2\", user2.id);\r",
                  "\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "\r",
                  "        // Создание и публикация события\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        \r",
                  "        \r",
                  "        // Создание комментария\r",
                  "        const comment = { text: \"Комментарий для публичного отображения\" };\r",
                  "        const createdComment = await api.addComment(user.id, event.id, comment);\r",
                  "        pm.collectionVariables.set(\"cid\", createdComment.id);\r",
                  "\r",
                  "        // Модерация (approve)\r",
                  "        await api.moderateComment(createdComment.id, true, \"Одобрен\");\r",
                  "\r",
                  "        // Создание комментария\r",
                  "        const comment2 = { text: \"Комментарий для публичного отображения второй\" };\r",
                  "        const createdComment2 = await api.addComment(user2.id, event.id, comment2);\r",
                  "\r",
                  "        // Модерация (approve)\r",
                  "        await api.moderateComment(createdComment2.id, true, \"Одобрен\");\r",
                  "\r",
                  "    } catch (err) {\r",
                  "        console.error(\"Ошибка при подготовке данных:\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => {\r",
                  "    try {\r",
                  "        await main();\r",
                  "    } catch (e) {\r",
                  "        console.error(e);\r",
                  "    } finally {\r",
                  "        clearInterval(interval);\r",
                  "    }\r",
                  "}, 100);\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains at least one approved comment\", function () {\r",
                  "    const json = pm.response.json();\r",
                  "    pm.expect(json.length).to.be.above(0);\r",
                  "    pm.expect(json[0]).to.have.property(\"text\");\r",
                  "    pm.expect(json[0]).to.have.property(\"published\", true);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/:eventId/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":eventId",
                "comments"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
          "    }",
          "",
          "    async addCompilation(compilation, verbose=null) {",
          "        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
          "    }",
          "",
          "    async publishParticipationRequest(eventId, userId, verbose=null) {",
          "        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
          "    }",
          "",
          "    async addComment(userId, eventId, comment, verbose = null) {",
          "    return this.post(`/users/${userId}/comments/${eventId}`, comment, \"Ошибка при добавлении комментария\", verbose);",
          "}",
          "",
          "    async publishEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
          "    }",
          "",
          "async moderateComment(commentId, publish, moderatorComment = null, verbose = null) {",
          "    let queryParams = `?publish=${publish.toString()}`;",
          "    if (moderatorComment) {",
          "        queryParams += `&moderatorComment=${encodeURIComponent(moderatorComment)}`;",
          "    }",
          "    return this.patch(",
          "        `/admin/comments/${commentId}${queryParams}`,",
          "        null,",
          "        \"Ошибка при модерации комментария\",",
          "        verbose",
          "    );",
          "}",
          "",
          "    ",
          "    async rejectEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
          "    }",
          "",
          "    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
          "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
          "    }",
          "",
          "    async findCategory(catId, verbose=null) {",
          "        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
          "    }",
          "",
          "    async findCompilation(compId, verbose=null) {",
          "        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
          "    }",
          "",
          "    async findUser(userId, verbose=null) {",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
          "    }",
          "",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "",
          "            const request = {",
          "                url: this.baseUrl + path,",
          "                method: method,",
          "                body: body == null ? \"\" : JSON.stringify(body),",
          "                header: { \"Content-Type\": \"application/json\" },",
          "            };",
          "",
          "            if(verbose) {",
          "                console.log(\"Отправляю запрос: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
          "",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "",
          "                    if(verbose) {",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
          "                    }",
          "",
          "                    resolve(response.json());",
          "                });",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "};",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "",
          "    getCompilation(...eventIds) {",
          "        return {",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            events: eventIds",
          "        };",
          "    }",
          "",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "uid",
      "value": "1"
    },
    {
      "key": "eid",
      "value": "1",
      "type": "string"
    },
    {
      "key": "comid",
      "value": "1",
      "type": "string"
    },
    {
      "key": "cid",
      "value": ""
    },
    {
      "key": "uid2",
      "value": ""
    }
  ]
}